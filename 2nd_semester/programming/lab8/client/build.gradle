plugins {
    id 'application'
    id 'java-library'
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.0'
    id 'org.openjfx.javafxplugin' version "0.0.10"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.openjfx:javafx-controls:20'
    implementation 'org.openjfx:javafx-fxml:20'
    implementation 'org.openjfx:javafx-graphics:20'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.6"
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation project(':common')
    compileOnly 'org.projectlombok:lombok:1.18.32'
    annotationProcessor 'org.projectlombok:lombok:1.18.32'
    testCompileOnly 'org.projectlombok:lombok:1.18.32'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.32'
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes 'Main-Class': 'client.Main'
    }
}

def os = org.gradle.internal.os.OperatingSystem.current()
def arch = System.getProperty("os.arch")
def javafxPlatform = os.isMacOsX() && arch.contains("aarch64") ? "mac-aarch64" : os.isWindows() ? "win" : os.isLinux() ? "linux" : os.isMacOsX() ? "mac" : ""

dependencies {
    implementation "org.openjfx:javafx-base:20:${javafxPlatform}"
    implementation "org.openjfx:javafx-controls:20:${javafxPlatform}"
    implementation "org.openjfx:javafx-fxml:20:${javafxPlatform}"
    implementation "org.openjfx:javafx-graphics:20:${javafxPlatform}"
}

shadowJar {
    archiveBaseName = 'client'
    version = '1.0.1'
    manifest {
        attributes 'Main-Class': 'client.Main'
    }
}

application {
    mainClass = 'client.Main'
}

javafx {
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

run {
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}